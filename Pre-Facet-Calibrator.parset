##########################################################################
# Pre-Facet-Calibrator Calibration Pipeline                              #
#                                                                        #
# Calibrator part of the basic Pre-Facet calibration pipeline:           #
# - requires LOFAR software version  >= 3.1.0                            #
# - requires losoto software version >= 2.0.0                            #
# - expects shared filesystem, that all nodes can reach all files!       #
#   (E.g. a single workstation or compute cluster with shared filesystem #
#   doesn't work on multiple nodes on CEP3.)                             #
##########################################################################

##########################################
### parameters you will need to adjust  ##
##########################################

## information about the calibrator data
! cal_input_path           =  /data/scratch/drabent  ## specify the directory where your calibrator data are stored
! cal_input_pattern        =  L217455*.MS            ## regular expression pattern of all your calibrator files

## location of the software
! prefactor_directory      =  $PREFACTOR_PATH        ## path to your prefactor copy
! losoto_directory         =  $LOSOTO_PATH           ## path to your local LoSoTo installation

##########################################
###  parameters you may want to adjust  ##
##########################################

## flagging
! bad_SB_list              =  "307;308"  ## semicolumn-separated list of subbands to be mitigated, e.g., due to RFI
! flag_baselines           =  []         ## NDPPP-compatible pattern for baselines or stations to be flagged (may be an empty list, i.e.: [] )

## reference
! reference_station        =  CS001HBA0  ## name of the station that will be used as a reference for the phase-plots

## averaging for the calibrator data
! avg_timeresolution       =  4.        ## average to 4 sec/timeslot
! avg_freqresolution       =  48.82kHz  ## average to 48.82 kHz/ch (= 4 ch/SB)

## pipeline performance
! num_proc_per_node        =  input.output.max_per_node  ## number of processes to use per step per node (usually max_per_node from pipeline.cfg)
! num_proc_per_node_limit  =  4                          ## number of processes to use per step per node for tasks with high i/o (dppp or cp) or memory (eg calibration)
! max_dppp_threads         =  8                          ## number of threads per process for NDPPP
! error_tolerance          =  False                      ## set this to True if you want the pipeline run to continue if single bands fail

## main directories
! lofar_directory          =  $LOFARROOT                  ## base directory of your LOFAR installation
! job_directory            =  input.output.job_directory  ## directory of the prefactor outputs

## script and plugin directories
! scripts                  =  {{ prefactor_directory }}/scripts
pipeline.pluginpath        =  {{ prefactor_directory }}/plugins

## skymodel directory
! calibrator_path_skymodel =  {{ prefactor_directory }}/skymodels

## result directories
! results_directory        =  {{ job_directory }}/results         ## location of the results
! inspection_directory     =  {{ results_directory }}/inspection  ## directory where the inspection plots will be stored
! cal_values_directory     =  {{ results_directory }}/cal_values  ## directory where the final h5parm solution set will be stored


########################################################
##                                                    ##
##   BEGIN PIPELINE: DO NOT UPDATE BELOW THIS LINE!   ##
##                                                    ##
########################################################

# which steps to run
pipeline.steps=[createmap_cal, ndppp_prep_cal, combine_data_cal_map, sky_cal, make_sourcedb, expand_sourcedb, calib_cal_parmmap, calib_cal, cal_apply, h5_imp_cal_map, h5imp_cal, prepare_losoto, process_losoto, mk_cal_values_dir, copy_cal_h5]

# generate a mapfile of all the calibrator data
createmap_cal.control.kind                           =   plugin
createmap_cal.control.type                           =   createMapfile
createmap_cal.control.method                         =   mapfile_from_folder
createmap_cal.control.mapfile_dir                    =   input.output.mapfile_dir
createmap_cal.control.filename                       =   createmap_cal.mapfile
createmap_cal.control.folder                         =   {{ cal_input_path }}
createmap_cal.control.pattern                        =   {{ cal_input_pattern }}

# run NDPPP on the calibrator data
ndppp_prep_cal.control.type                          =   dppp
ndppp_prep_cal.control.max_per_node                  =   {{ num_proc_per_node_limit }}
ndppp_prep_cal.control.error_tolerance               =   {{ error_tolerance }}
ndppp_prep_cal.argument.numthreads                   =   {{ max_dppp_threads }}
ndppp_prep_cal.argument.msin                         =   createmap_cal.output.mapfile    # The input data.
ndppp_prep_cal.argument.msin.datacolumn              =   DATA
ndppp_prep_cal.argument.msin.baseline                =   CS*&; RS*&; CS*&RS*
ndppp_prep_cal.argument.msout.datacolumn             =   DATA
ndppp_prep_cal.argument.msout.writefullresflag       =   False
ndppp_prep_cal.argument.msout.overwrite              =   True
ndppp_prep_cal.argument.steps                        =   [flag,filter,avg,flagamp]
ndppp_prep_cal.argument.flag.type                    =   preflagger
ndppp_prep_cal.argument.flag.baseline                =   {{ flag_baselines }}
ndppp_prep_cal.argument.filter.type                  =   filter
ndppp_prep_cal.argument.filter.baseline              =   CS*, RS*&&
ndppp_prep_cal.argument.filter.remove                =   true                     # fully kick out the international stations.
ndppp_prep_cal.argument.avg.type                     =   average
ndppp_prep_cal.argument.avg.timeresolution           =   {{ avg_timeresolution }}
ndppp_prep_cal.argument.avg.freqresolution           =   {{ avg_freqresolution }}
ndppp_prep_cal.argument.flagamp.type                 =   preflagger
ndppp_prep_cal.argument.flagamp.amplmin              =   1e-30

# combine all entries into one mapfile (just for the find_skymodel_cal_auto script)
combine_data_cal_map.control.kind                    =   plugin
combine_data_cal_map.control.type                    =   createMapfile
combine_data_cal_map.control.method                  =   mapfile_all_to_one
combine_data_cal_map.control.mapfile_dir             =   input.output.mapfile_dir
combine_data_cal_map.control.filename                =   combine_data_cal_map.mapfile
combine_data_cal_map.control.mapfile_in              =   createmap_cal.output.mapfile

# find automatically the calibrator sky model
sky_cal.control.type                                 =   pythonplugin
sky_cal.control.executable                           =   {{ scripts }}/find_skymodel_cal.py
sky_cal.control.error_tolerance                      =   {{ error_tolerance }}
sky_cal.argument.flags                               =   [combine_data_cal_map.output.mapfile]
sky_cal.argument.DirSkymodelCal                      =   {{ calibrator_path_skymodel }}

# make the sourcedb
make_sourcedb.control.kind                           =   recipe
make_sourcedb.control.type                           =   executable_args
make_sourcedb.control.executable                     =   {{ lofar_directory }}/bin/makesourcedb
make_sourcedb.control.error_tolerance                =   {{ error_tolerance }}
make_sourcedb.control.args_format                    =   lofar
make_sourcedb.control.outputkey                      =   out
make_sourcedb.control.mapfile_in                     =   sky_cal.output.SkymodelCal.mapfile
make_sourcedb.control.inputkey                       =   in
make_sourcedb.argument.format                        =   <
make_sourcedb.argument.outtype                       =   blob

# expand the sourcedb mapfile so that there is one entry for every file, length = nfiles
expand_sourcedb.control.kind                         =   plugin
expand_sourcedb.control.type                         =   expandMapfile
expand_sourcedb.control.mapfile_in                   =   make_sourcedb.output.mapfile
expand_sourcedb.control.mapfile_to_match             =   ndppp_prep_cal.output.mapfile
expand_sourcedb.control.mapfile_dir                  =   input.output.mapfile_dir
expand_sourcedb.control.filename                     =   expand_sourcedb.mapfile

# generate mapfile with the h5parm names to be used in the calib_cal steps
calib_cal_parmmap.control.kind                       =   plugin
calib_cal_parmmap.control.type                       =   createMapfile
calib_cal_parmmap.control.method                     =   add_suffix_to_file
calib_cal_parmmap.control.mapfile_in                 =   ndppp_prep_cal.output.mapfile
calib_cal_parmmap.control.add_suffix_to_file         =   /instrument.h5
calib_cal_parmmap.control.mapfile_dir                =   input.output.mapfile_dir
calib_cal_parmmap.control.filename                   =   calib_cal_h5parms.mapfile

# now run NDPPP on the averaged calibrator data
calib_cal.control.type                               =   dppp
calib_cal.control.max_per_node                       =   {{ num_proc_per_node_limit }}
calib_cal.control.inplace                            =   True
calib_cal.control.error_tolerance                    =   {{ error_tolerance }}
calib_cal.argument.numthreads                        =   {{ max_dppp_threads }}
calib_cal.argument.msin                              =   ndppp_prep_cal.output.mapfile    # The input data.
calib_cal.argument.msin.datacolumn                   =   DATA
calib_cal.argument.msin.baseline                     =   CS*&; RS*&; CS*&RS*
calib_cal.argument.steps                             =   [solve]
calib_cal.argument.solve.type                        =   ddecal
calib_cal.argument.solve.mode                        =   rotation+diagonal
calib_cal.argument.solve.nchan                       =   1
calib_cal.argument.solve.solint                      =   1
calib_cal.argument.solve.sourcedb                    =   expand_sourcedb.output.mapfile
calib_cal.argument.solve.h5parm                      =   calib_cal_parmmap.output.mapfile
calib_cal.argument.solve.usebeammodel                =   True
calib_cal.argument.solve.usechannelfreq              =   False
calib_cal.argument.solve.uvlambdamin                 =   160
calib_cal.argument.solve.uvlambdamax                 =   50000
calib_cal.argument.solve.maxiter                     =   50
calib_cal.argument.solve.tolerance                   =   1e-10

# apply the calibration solutions
cal_apply.control.type                               =   dppp
cal_apply.control.error_tolerance                    =   {{ error_tolerance }}
cal_apply.control.inplace                            =   True
cal_apply.control.max_per_node                       =   {{ num_proc_per_node_limit }}
cal_apply.argument.numthreads                        =   {{ max_dppp_threads }}
cal_apply.argument.msin                              =   ndppp_prep_cal.output.mapfile
cal_apply.argument.msin.datacolumn                   =   DATA
cal_apply.argument.msout.datacolumn                  =   CORRECTED_DATA
cal_apply.argument.msout                             =   .
cal_apply.argument.steps                             =   [applycal1,applycal2,applycal3]
cal_apply.argument.applycal1.type                    =   applycal
cal_apply.argument.applycal1.correction              =   amplitude000
cal_apply.argument.applycal1.parmdb                  =   calib_cal_parmmap.output.mapfile
cal_apply.argument.applycal2.type                    =   applycal
cal_apply.argument.applycal2.correction              =   phase000
cal_apply.argument.applycal2.parmdb                  =   calib_cal_parmmap.output.mapfile
cal_apply.argument.applycal3.type                    =   applycal
cal_apply.argument.applycal3.correction              =   rotation000
cal_apply.argument.applycal3.parmdb                  =   calib_cal_parmmap.output.mapfile

# generate a mapfile with all files in a single entry
h5_imp_cal_map.control.kind                          =   plugin
h5_imp_cal_map.control.type                          =   compressMapfile
h5_imp_cal_map.control.mapfile_in                    =   calib_cal_parmmap.output.mapfile
h5_imp_cal_map.control.mapfile_dir                   =   input.output.mapfile_dir
h5_imp_cal_map.control.filename                      =   h5_imp_cal_map.mapfile

# collect all instrument tables into one h5parm
h5imp_cal.control.kind                               =   recipe
h5imp_cal.control.type                               =   executable_args
h5imp_cal.control.executable                         =   {{ losoto_directory }}/bin/H5parm_collector.py
h5imp_cal.control.error_tolerance                    =   {{ error_tolerance }}
h5imp_cal.control.outputkey                          =   outh5parm
h5imp_cal.argument.flags                             =   [-c,h5_imp_cal_map.output.mapfile]
h5imp_cal.argument.outh5parm                         =   outh5parm

# create losoto v2 parset file
prepare_losoto.control.kind                          =   plugin
prepare_losoto.control.type                          =   makeLosotoParset
prepare_losoto.control.steps                         =   [clocktec, clock_smooth, bandpass, xyoffset, plot_phases, plot_amps, plot_clock, plot_TEC, plot_bandpass, plot_xyoffset]
prepare_losoto.control.filename                      =   input.output.job_directory/losoto.parset
prepare_losoto.control.global.ncpu                   =   0
prepare_losoto.control.clocktec.soltab               =   [sol000/phase000]
prepare_losoto.control.clocktec.operation            =   CLOCKTEC
prepare_losoto.control.clocktec.combinePol           =   True
prepare_losoto.control.clocktec.flagBadChannels      =   False
prepare_losoto.control.clocktec.fit3rdOrder          =   False
prepare_losoto.control.clock_smooth.soltab           =   [sol000/clock000]
prepare_losoto.control.clock_smooth.operation        =   SMOOTH
prepare_losoto.control.clock_smooth.axestosmooth     =   [time]
prepare_losoto.control.clock_smooth.mode             =   median
prepare_losoto.control.clock_smooth.replace          =   True
prepare_losoto.control.bandpass.soltab               =   [sol000/amplitude000]
prepare_losoto.control.bandpass.operation            =   PREFACTOR_BANDPASS
prepare_losoto.control.bandpass.chanWidth            =   {{ avg_freqresolution }}
prepare_losoto.control.bandpass.BadSBList            =   {{ bad_SB_list }}
prepare_losoto.control.xyoffset.soltab               =   [sol000/phase000]
prepare_losoto.control.xyoffset.chanWidth            =   {{ avg_freqresolution }}
prepare_losoto.control.xyoffset.operation            =   PREFACTOR_XYOFFSET
prepare_losoto.control.plot_phases.Operation         =   PLOT
prepare_losoto.control.plot_phases.Soltab            =   [sol000/phase000]
prepare_losoto.control.plot_phases.axesInPlot        =   [time,freq]
prepare_losoto.control.plot_phases.axisInTable       =   ant
prepare_losoto.control.plot_phases.refAnt            =   CS001HBA0
prepare_losoto.control.plot_phases.plotFlag          =   False
prepare_losoto.control.plot_phases.minmax            =   [-3.14,3.14]
prepare_losoto.control.plot_phases.prefix            =   {{ inspection_directory }}/cal_phases_
prepare_losoto.control.plot_amps.Operation           =   PLOT
prepare_losoto.control.plot_amps.Soltab              =   [sol000/amplitude000]
prepare_losoto.control.plot_amps.axesInPlot          =   [time,freq]
prepare_losoto.control.plot_amps.axisInTable         =   ant
prepare_losoto.control.plot_amps.plotFlag            =   False
prepare_losoto.control.plot_amps.prefix              =   {{ inspection_directory }}/cal_amplitude_
prepare_losoto.control.plot_clock.Operation          =   PLOT
prepare_losoto.control.plot_clock.Soltab             =   [sol000/clock000]
prepare_losoto.control.plot_clock.axesInPlot         =   [time]
prepare_losoto.control.plot_clock.axisInTable        =   ant
prepare_losoto.control.plot_clock.plotFlag           =   False
prepare_losoto.control.plot_clock.prefix             =   {{ inspection_directory }}/losoto_clock
prepare_losoto.control.plot_TEC.Operation            =   PLOT
prepare_losoto.control.plot_TEC.Soltab               =   [sol000/tec000]
prepare_losoto.control.plot_TEC.axesInPlot           =   [time]
prepare_losoto.control.plot_TEC.axisInTable          =   ant
prepare_losoto.control.plot_TEC.PlotFlag             =   False
prepare_losoto.control.plot_TEC.prefix               =   {{ inspection_directory }}/losoto_tec
prepare_losoto.control.plot_bandpass.Operation       =   PLOT
prepare_losoto.control.plot_bandpass.Soltab          =   [sol000/bandpass]
prepare_losoto.control.plot_bandpass.axesInPlot      =   [freq]
prepare_losoto.control.plot_bandpass.axisInCol       =   ant
prepare_losoto.control.plot_bandpass.PlotFlag        =   False
prepare_losoto.control.plot_bandpass.prefix          =   {{ inspection_directory }}/losoto_bandpass
prepare_losoto.control.plot_xyoffset.Operation       =   PLOT
prepare_losoto.control.plot_xyoffset.Soltab          =   [sol000/XYoffset]
prepare_losoto.control.plot_xyoffset.pol             =   YY
prepare_losoto.control.plot_xyoffset.axesInPlot      =   [freq]
prepare_losoto.control.plot_xyoffset.axisInTable     =   ant
prepare_losoto.control.plot_xyoffset.PlotFlag        =   False
prepare_losoto.control.plot_xyoffset.prefix          =   {{ inspection_directory }}/losoto_xyoffset

# do the processing on the LoSoTo file
process_losoto.control.kind                          =   recipe
process_losoto.control.type                          =   executable_args
process_losoto.control.executable                    =   {{ losoto_directory }}/bin/losoto
process_losoto.control.max_per_node                  =   {{ num_proc_per_node }}
process_losoto.argument.flags                        =   [h5imp_cal.output.mapfile, input.output.job_directory/losoto.parset]

# create the cal_values_directory if needed
mk_cal_values_dir.control.kind                       =   plugin
mk_cal_values_dir.control.type                       =   makeDirectory
mk_cal_values_dir.control.directory                  =   {{ cal_values_directory }}

# copy the cal h5parm to the cal-values directory
copy_cal_h5.control.kind                             =   recipe
copy_cal_h5.control.type                             =   executable_args
copy_cal_h5.control.executable                       =   /bin/cp
copy_cal_h5.control.max_per_node                     =   {{ num_proc_per_node_limit }}
copy_cal_h5.control.mapfile_in                       =   h5imp_cal.output.mapfile
copy_cal_h5.control.inputkey                         =   source
copy_cal_h5.control.arguments                        =   [source,{{ cal_values_directory }}]
