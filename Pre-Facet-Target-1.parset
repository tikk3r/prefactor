##########################################################################
# Pre-Facet Target Calibration Pipeline                                  #
#                                                                        #
# Target part of the basic Pre-Facet calibration pipeline:               #
# - requires LOFAR software version  >= 3.1.0                            #
# - requires losoto software version >= 2.0.0                            #
# - expects shared filesystem, that all nodes can reach all files!       #
#   (E.g. a single workstation or compute cluster with shared filesystem #
#   doesn't work on multiple nodes on CEP3.)                             #
##########################################################################

##########################################
### parameters you will need to adjust. ##
##########################################

## information about the target data
! target_input_path         =  PREFACTOR_SCRATCH_DIR/Input            ## specify the directory where your target data is stored
! target_input_pattern      =  *MS                                    ## regular expression pattern of all your target files

## location of the software
! prefactor_directory       =  PREFACTOR_SCRATCH_DIR/prefactor        ## path to your prefactor copy
! losoto_directory          =  /opt/lofar/losoto                      ## path to your local LoSoTo installation
! aoflagger                 =  /opt/lofar/aoflagger/bin/aoflagger     ## path to your aoflagger executable

## location of the calibrator solutions
! cal_solutions             =  $RUNDIR/prefactor/cal_values/cal_solutions.h5

##########################################
### parameters you may need to adjust   ##
##########################################

! refant                   =  'CS001HBA0'                             ## name of the station that will be used as a reference for the phase plots, 'closest' will reference to the spatially closest unflagged antenna
! flag_baselines            =  []                                     ## NDPPP-compatible pattern for baselines or stations to be flagged (may be an empty list, i.e.: [] )
! filter_baselines          =  [CR]S*&                                ## selects only this set of baselines to be processed. Choose [CR]S*& if you want to process only cross-correlations and remove international stations.
! do_smooth                 =  False                                  ## enable or disable baseline-based smoothing
! rfistrategy               =  HBAdefault.rfis                        ## strategy to be applied with the statistical flagger (AOFlagger) for wideband flagging
! interp_windowsize         =  15                                     ## Size of the window over which a value is interpolated. Should be odd.
! min_unflagged_fraction    =  0.5                                    ## minimum fraction of unflagged data after RFI flagging and A-team clipping
! compression_bitrate       =  16                                     ## defines the bitrate of Dysco compression of the data after the final step, choose 0 if you do NOT want to compress the data
! raw_data                  =  False                                  ## use autoweight, set to True in case you are using raw data
! propagatesolutions        =  True                                   ## use already derived solutions as initial guess for the upcoming time slot

# demixing options (only used if demix step is added to the prep_cal_strategy variable)
! demix_sources             =  [CasA,CygA]                            ## choose sources to demix (provided as list)
! demix_target              =  ""                                     ## if given, the target source model (its patch in the SourceDB) is taken into account when solving
! demix_freqstep            =  16                                     ## number of channels to average when demixing.
! demix_timestep            =  10                                     ## number of time slots to average when demixing

# definitions for pipeline options -- do not change!
! default_flagging          =  flagbaseline,flagelev,flagamp          ## regular flagging after pre-processing by the observatory pipelines
! raw_flagging              =  flagedge,aoflag,{{ default_flagging }} ## full flagging (usually only necessary for raw data)
! demix                     =  demix,                                 ## Do not change! Only demix_step should be edited if needed
! clipATeam                 =  clipATeam,                             ## Do not change! Only clipATeam_step should be edited if needed
! none                      =                                         ## Do not change!

# pipeline options
! initial_flagging          =  {{ default_flagging }}                 ## choose {{ raw_flagging }} if you process raw data
! demix_step                =  {{ none }}                             ## choose {{ demix }} if you want to demix
! apply_steps               =  applyclock,applybeam,applyRM           ## comma-separated list of apply_steps performed in the target preparation (NOTE: only use applyRM if you have performed RMextract before!)
! clipAteam_step            =  {{ clipATeam }}                        ## choose {{ none }} if you want to skip A-team-clipping
! gsmcal_step               =  phase                                  ## choose tec if you want to fit TEC instead of self-calibrating for phases
! updateweights             =  True                                   ## update the weights column, in a way consistent with the weights being inverse proportional to the autocorrelations

##########################################
### parameters for pipeline performance ##
##########################################

! num_proc_per_node         =  4                                      ## number of processes to use per step per node (usually max_per_node from pipeline.cfg)
! num_proc_per_node_limit   =  4                                      ## number of processes to use per step per node for tasks with high i/o (dppp or cp) or memory (eg calibration)
! max_dppp_threads          =  4                                      ## number of threads per process for NDPPP
! min_length                =  5                                      ## minimum amount of chunks to concatenate in frequency necessary to perform the wide-band flagging in the RAM. It data is too big aoflag will use indirect-read.
! overhead                  =  0.8                                    ## Only use this fraction of the available memory for deriving the amount of data to be concatenated.
! min_separation            =  30                                     ## minimal accepted distance to an A-team source on the sky in degrees (will raise a WARNING)

! error_tolerance           =  False                                  ## set this to True if you want the pipeline run to continue if single bands fail

##########################################
### parameters you may want to adjust   ##
##########################################

## main directories
! lofar_directory           =  $LOFARROOT                             ## base directory of your LOFAR installation
! job_directory             =  input.output.job_directory             ## directory of the prefactor outputs

## script and plugin directories
! scripts                   =  {{ prefactor_directory }}/scripts
pipeline.pluginpath         =  {{ prefactor_directory }}/plugins

## skymodel directory
! calibrator_path_skymodel  =  {{ prefactor_directory }}/skymodels
! A-team_skymodel           =  {{ calibrator_path_skymodel }}/Ateam_LBA_CC.skymodel
! target_skymodel           =  {{ job_directory }}/target.skymodel    ## path to the skymodel for the phase-only calibration of the target
! use_target                =  True                                   ## download the phase-only calibration skymodel from TGSS, "Force" : always download , "True" download if {{ target_skymodel }} does not exist , "False" : never download
! skymodel_source           =  GSM                                    ## use GSM if you want to use the experimental (!) GSM SkyModel creator using TGSS, NVSS, WENSS and VLSS

## result directories
! results_directory         =  $RUNDIR/Output                         ## location of the results
! inspection_directory      =  {{ results_directory }}/inspection     ## directory where the inspection plots will be stored
! cal_values_directory      =  {{ results_directory }}/cal_values     ## directory where the final h5parm solution set will be stored

## calibrator + target solutions
! solutions                 =  {{ cal_values_directory }}/solutions.h5

## averaging for the target data
! avg_timeresolution        =  4.                                     ## average to 4 sec/timeslot
! avg_freqresolution        =  36.62kHz                               ## average to 3 ch/SB
! avg_timeresolution_concat =  8.                                     ## average to 8 sec/timeslot
! avg_freqresolution_concat =  36.62kHz                               ## average to 3 ch/SB

## concatenating the target data
! num_SBs_per_group         =  10                                     ## make concatenated measurement-sets with that many subbands, choose a high number if running LBA
! reference_stationSB       =  None                                   ## station-subband number to use as reference for grouping, "None" -> use lowest frequency input data as reference

## RMextract settings
! ionex_server              =  "ftp://ftp.aiub.unibe.ch/CODE/"        ## to download from the "standard" server
! ionex_prefix              =  CODG                                   ## the prefix of the IONEX files
! ionex_path                =  {{ job_directory }}/IONEX/             ## path where the IONEX files can be stored or are already stored

########################################################
##                                                    ##
##    BEGIN PIPELINE: DO NOT UPDATE BELOW THIS LINE!  ##
##                                                    ##
########################################################

# which steps to run
pipeline.steps              =  [prep, {{ clipATeam }} concat, finalize]

# pipeline substeps
pipeline.steps.prep         =  [createmap_target, get_targetname, combine_data_target_map, check_Ateam_separation, mk_targ_values_dir, copy_cal_sols, check_station_mismatch, createmap_preptarg, createmap_insttarg, create_ateam_model_map, make_sourcedb_ateam, expand_sourcedb_ateam, h5imp_RMextract, prepare_losoto_RMextract, process_losoto_RMextract, ndppp_prep_target]

pipeline.steps.clipATeam    =  [predict_ateam, ateamcliptar]

pipeline.steps.finalize     =  [make_results_mapfile_uncor, move_results_uncor, h5parm_name]


#############################
## Prepare target part     ##
#############################
# generate a mapfile of all the target data
createmap_target.control.kind                                  =   plugin
createmap_target.control.type                                  =   createMapfile
createmap_target.control.method                                =   mapfile_from_folder
createmap_target.control.mapfile_dir                           =   input.output.mapfile_dir
createmap_target.control.filename                              =   createmap_target.mapfile
createmap_target.control.folder                                =   {{ target_input_path }}
createmap_target.control.pattern                               =   {{ target_input_pattern }}

# get the target name
get_targetname.control.kind                                    =   plugin
get_targetname.control.type                                    =   getTargetName
get_targetname.control.mapfile_in                              =   createmap_target.output.mapfile

# combine all entries into one mapfile, for the sortmap script
combine_data_target_map.control.kind                           =   plugin
combine_data_target_map.control.type                           =   createMapfile
combine_data_target_map.control.method                         =   mapfile_all_to_one
combine_data_target_map.control.mapfile_dir                    =   input.output.mapfile_dir
combine_data_target_map.control.filename                       =   combine_data_tar_map.mapfile
combine_data_target_map.control.mapfile_in                     =   createmap_target.output.mapfile

# warn for potential nearby A-Team sources
check_Ateam_separation.control.type                            =   pythonplugin
check_Ateam_separation.control.executable                      =   {{ scripts }}/check_Ateam_separation.py
check_Ateam_separation.control.mapfile_in                      =   combine_data_target_map.output.mapfile
check_Ateam_separation.control.inputkey                        =   MSfile
check_Ateam_separation.argument.min_separation                 =   {{ min_separation }}
check_Ateam_separation.argument.outputimage                    =   {{ inspection_directory }}/A-Team_elevation_target.png
check_Ateam_separation.argument.flags                          =   [MSfile]

# create the cal_values_directory if needed
mk_targ_values_dir.control.kind                                =   plugin
mk_targ_values_dir.control.type                                =   makeDirectory
mk_targ_values_dir.control.directory                           =   {{ cal_values_directory }}

# move the results to where we want them
copy_cal_sols.control.kind                                     =   recipe
copy_cal_sols.control.type                                     =   executable_args
copy_cal_sols.control.executable                               =   /bin/cp
copy_cal_sols.control.max_per_node                             =   1
copy_cal_sols.control.skip_infile                              =   True
copy_cal_sols.control.mapfile_in                               =   combine_data_target_map.output.mapfile
copy_cal_sols.argument.flags                                   =   [{{ cal_solutions }},{{ solutions }}]

# check potential station mismatch
check_station_mismatch.control.kind                            =   plugin
check_station_mismatch.control.type                            =   compareStationList
check_station_mismatch.control.mapfile_in                      =   createmap_target.output.mapfile
check_station_mismatch.control.h5parmdb                        =   {{ solutions }}
check_station_mismatch.control.solset_name                     =   calibrator
check_station_mismatch.control.filter                          =   {{ filter_baselines }}


###################################
## Prepare for demixing/clipping ##
###################################
# generate a mapfile of the target
createmap_preptarg.control.kind                                =   plugin
createmap_preptarg.control.type                                =   makeResultsMapfile
createmap_preptarg.control.mapfile_dir                         =   input.output.mapfile_dir
createmap_preptarg.control.filename                            =   createmap_preptarg.mapfile
createmap_preptarg.control.mapfile_in                          =   createmap_target.output.mapfile
createmap_preptarg.control.target_dir                          =   {{ job_directory }}
createmap_preptarg.control.make_target_dir                     =   False
createmap_preptarg.control.new_suffix                          =   .ndppp_prep_target

# generate a mapfile for the instrument table of the target
createmap_insttarg.control.kind                                =   plugin
createmap_insttarg.control.type                                =   changeMapfile
createmap_insttarg.control.mapfile_in                          =   createmap_preptarg.output.mapfile
createmap_insttarg.control.join_files                          =   instrument
createmap_insttarg.control.newname                             =   createmap_insttarg.mapfile

# create a mapfile with the A-Team skymodel, length = 1
create_ateam_model_map.control.kind                            =   plugin
create_ateam_model_map.control.type                            =   addListMapfile
create_ateam_model_map.control.hosts                           =   ['localhost']
create_ateam_model_map.control.files                           =   [ {{ A-team_skymodel }} ]
create_ateam_model_map.control.mapfile_dir                     =   input.output.mapfile_dir
create_ateam_model_map.control.filename                        =   ateam_model_name.mapfile

# make sourcedbs from the A-Team skymodel, length = 1
make_sourcedb_ateam.control.kind                               =   recipe
make_sourcedb_ateam.control.type                               =   executable_args
make_sourcedb_ateam.control.executable                         =   {{ lofar_directory }}/bin/makesourcedb
make_sourcedb_ateam.control.error_tolerance                    =   {{ error_tolerance }}
make_sourcedb_ateam.control.args_format                        =   lofar
make_sourcedb_ateam.control.outputkey                          =   out
make_sourcedb_ateam.control.mapfile_in                         =   create_ateam_model_map.output.mapfile
make_sourcedb_ateam.control.inputkey                           =   in
make_sourcedb_ateam.argument.format                            =   <
make_sourcedb_ateam.argument.outtype                           =   blob

# expand the sourcedb mapfile so that there is one entry for every file, length = nfiles
expand_sourcedb_ateam.control.kind                             =   plugin
expand_sourcedb_ateam.control.type                             =   expandMapfile
expand_sourcedb_ateam.control.mapfile_in                       =   make_sourcedb_ateam.output.mapfile
expand_sourcedb_ateam.control.mapfile_to_match                 =   createmap_target.output.mapfile
expand_sourcedb_ateam.control.mapfile_dir                      =   input.output.mapfile_dir
expand_sourcedb_ateam.control.filename                         =   expand_sourcedb_ateam.datamap


#############################
## RM target correction    ##
#############################
# get ionex files once for every day that is covered by one of the input MSs
h5imp_RMextract.control.type                                   =   pythonplugin
h5imp_RMextract.control.executable                             =   {{ scripts }}/createRMh5parm.py
h5imp_RMextract.control.error_tolerance                        =   {{ error_tolerance }}
h5imp_RMextract.argument.flags                                 =   [combine_data_target_map.output.mapfile, {{ solutions }}]
h5imp_RMextract.argument.ionex_server                          =   {{ ionex_server }}
h5imp_RMextract.argument.ionex_prefix                          =   {{ ionex_prefix }}
h5imp_RMextract.argument.ionexPath                             =   {{ ionex_path }}
h5imp_RMextract.argument.solset_name                           =   target
h5imp_RMextract.argument.all_stations                          =   True

# create losoto v2 parset file
prepare_losoto_RMextract.control.kind                          =   plugin
prepare_losoto_RMextract.control.type                          =   makeLosotoParset
prepare_losoto_RMextract.control.steps                         =   [plotRM]
prepare_losoto_RMextract.control.filename                      =   {{ job_directory }}/losoto.parset
prepare_losoto_RMextract.control.global.ncpu                   =   {{ num_proc_per_node }}
prepare_losoto_RMextract.control.plotRM.operation              =   PLOT
prepare_losoto_RMextract.control.plotRM.soltab                 =   target/RMextract
prepare_losoto_RMextract.control.plotRM.axesInPlot             =   time
prepare_losoto_RMextract.control.plotRM.axisInTable            =   ant
prepare_losoto_RMextract.control.plotRM.prefix                 =   {{ inspection_directory }}/RMextract

# do the processing on the LoSoTo file
process_losoto_RMextract.control.kind                          =   recipe
process_losoto_RMextract.control.type                          =   executable_args
process_losoto_RMextract.control.executable                    =   {{ losoto_directory }}/bin/losoto
process_losoto_RMextract.control.max_per_node                  =   {{ num_proc_per_node }}
process_losoto_RMextract.control.mapfile_in                    =   combine_data_target_map.output.mapfile
process_losoto_RMextract.control.inputkey                      =   input
process_losoto_RMextract.argument.flags                        =   [{{ solutions }}, {{ job_directory }}/losoto.parset]


#############################
## Apply calibrator sols   ##
#############################
# run NDPPP on the target data to flag, transfer calibrator values, and average
ndppp_prep_target.control.type                                 =   dppp
ndppp_prep_target.control.max_per_node                         =   {{ num_proc_per_node_limit }}
ndppp_prep_target.control.error_tolerance                      =   {{ error_tolerance }}
ndppp_prep_target.control.mapfiles_in                          =   [createmap_target.output.mapfile]
ndppp_prep_target.control.inputkeys                            =   [input_file]
ndppp_prep_target.argument.numthreads                          =   {{ max_dppp_threads }}
ndppp_prep_target.argument.msin                                =   input_file
ndppp_prep_target.argument.msin.datacolumn                     =   DATA
ndppp_prep_target.argument.msin.baseline                       =   check_station_mismatch.output.filter
ndppp_prep_target.argument.msin.autoweight                     =   {{ raw_data }}
ndppp_prep_target.argument.msout.datacolumn                    =   DATA
ndppp_prep_target.argument.msout.writefullresflag              =   False
ndppp_prep_target.argument.msout.overwrite                     =   True
ndppp_prep_target.argument.msout.storagemanager                =   "Dysco"
ndppp_prep_target.argument.msout.storagemanager.databitrate    =   0
ndppp_prep_target.argument.steps                               =   [filter,{{ initial_flagging }},{{ demix_step }}applyPA,applybandpass,{{ apply_steps }},interp,avg]
ndppp_prep_target.argument.filter.type                         =   filter
ndppp_prep_target.argument.filter.baseline                     =   check_station_mismatch.output.filter
ndppp_prep_target.argument.filter.remove                       =   true
ndppp_prep_target.argument.flagedge.type                       =   preflagger
ndppp_prep_target.argument.flagedge.chan                       =   [0..nchan/32-1,31*nchan/32..nchan-1] # we are running on a single subband
ndppp_prep_target.argument.aoflag.type                         =   aoflagger
ndppp_prep_target.argument.aoflag.memoryperc                   =   10
ndppp_prep_target.argument.aoflag.keepstatistics               =   false
ndppp_prep_target.argument.flagbaseline.type                   =   preflagger
ndppp_prep_target.argument.flagbaseline.baseline               =   {{ flag_baselines }}
ndppp_prep_target.argument.flagelev.type                       =   preflagger
ndppp_prep_target.argument.flagelev.elevation                  =   0deg..20deg
ndppp_prep_target.argument.flagamp.type                        =   preflagger
ndppp_prep_target.argument.flagamp.amplmin                     =   1e-30
ndppp_prep_target.argument.applyPA.type                        =   applycal
ndppp_prep_target.argument.applyPA.parmdb                      =   {{ solutions }}
ndppp_prep_target.argument.applyPA.correction                  =   polalign
ndppp_prep_target.argument.applyPA.solset                      =   calibrator
ndppp_prep_target.argument.applybandpass.type                  =   applycal
ndppp_prep_target.argument.applybandpass.parmdb                =   {{ solutions }}
ndppp_prep_target.argument.applybandpass.correction            =   bandpass
ndppp_prep_target.argument.applybandpass.updateweights         =   {{ updateweights }}
ndppp_prep_target.argument.applybandpass.solset                =   calibrator
ndppp_prep_target.argument.applyclock.type                     =   applycal
ndppp_prep_target.argument.applyclock.parmdb                   =   {{ solutions }}
ndppp_prep_target.argument.applyclock.correction               =   clock
ndppp_prep_target.argument.applyclock.solset                   =   calibrator
ndppp_prep_target.argument.applytec.type                       =   applycal
ndppp_prep_target.argument.applytec.parmdb                     =   {{ solutions }}
ndppp_prep_target.argument.applytec.correction                 =   tec
ndppp_prep_target.argument.applytec.solset                     =   calibrator
ndppp_prep_target.argument.applyphase.type                     =   applycal
ndppp_prep_target.argument.applyphase.parmdb                   =   {{ solutions }}
ndppp_prep_target.argument.applyphase.correction               =   phaseOrig
ndppp_prep_target.argument.applyphase.solset                   =   calibrator
ndppp_prep_target.argument.applyRM.type                        =   applycal
ndppp_prep_target.argument.applyRM.parmdb                      =   {{ solutions }}
ndppp_prep_target.argument.applyRM.correction                  =   RMextract
ndppp_prep_target.argument.applyRM.solset                      =   target
ndppp_prep_target.argument.applybeam.type                      =   applybeam
ndppp_prep_target.argument.applybeam.usechannelfreq            =   True
ndppp_prep_target.argument.applybeam.updateweights             =   {{ updateweights }}
ndppp_prep_target.argument.interp.type                         =   interpolate
ndppp_prep_target.argument.interp.windowsize                   =   {{ interp_windowsize }}
ndppp_prep_target.argument.avg.type                            =   average
ndppp_prep_target.argument.avg.timeresolution                  =   {{ avg_timeresolution }}
ndppp_prep_target.argument.avg.freqresolution                  =   {{ avg_freqresolution }}
ndppp_prep_target.argument.demix.type                          =   demixer 
ndppp_prep_target.argument.demix.demixfreqstep                 =   {{ demix_freqstep }}
ndppp_prep_target.argument.demix.demixtimestep                 =   {{ demix_timestep }}
ndppp_prep_target.argument.demix.ignoretarget                  =   False
ndppp_prep_target.argument.demix.targetsource                  =   {{ demix_target }}
ndppp_prep_target.argument.demix.subtractsources               =   {{ demix_sources }}
ndppp_prep_target.argument.demix.ntimechunk                    =   {{ max_dppp_threads }}
ndppp_prep_target.argument.demix.skymodel                      =   expand_sourcedb_ateam.output.mapfile
ndppp_prep_target.argument.demix.freqstep                      =   1
ndppp_prep_target.argument.demix.timestep                      =   1
ndppp_prep_target.argument.demix.instrumentmodel               =   createmap_insttarg.output.mapfile


#############################
##     Clip A-Team         ##
#############################
# Predict, corrupt, and predict the ateam-resolution model, length = nfiles
predict_ateam.control.type                                     =   dppp
predict_ateam.control.mapfiles_in                              =   [ndppp_prep_target.output.mapfile,expand_sourcedb_ateam.output.mapfile]
predict_ateam.control.inputkeys                                =   [msin,sourcedb]
predict_ateam.control.inplace                                  =   True
predict_ateam.control.max_per_node                             =   {{ num_proc_per_node_limit }}
predict_ateam.control.error_tolerance                          =   {{ error_tolerance }}
predict_ateam.argument.numthreads                              =   {{ max_dppp_threads }}
predict_ateam.argument.msin.datacolumn                         =   DATA
predict_ateam.argument.msout.datacolumn                        =   MODEL_DATA
predict_ateam.argument.msout.storagemanager                    =   "Dysco"
predict_ateam.argument.msout.storagemanager.databitrate        =   0
predict_ateam.argument.steps                                   =   [predict]
predict_ateam.argument.predict.type                            =   predict
predict_ateam.argument.predict.operation                       =   replace
predict_ateam.argument.predict.sourcedb                        =   sourcedb
predict_ateam.argument.predict.sources                         =   [VirA_4_patch,CygAGG,CasA_4_patch,TauAGG]
predict_ateam.argument.predict.usebeammodel                    =   True
predict_ateam.argument.predict.usechannelfreq                  =   False
predict_ateam.argument.predict.onebeamperpatch                 =   True

# run the a-team clipper to flag data affected by the a-team
ateamcliptar.control.kind                                      =   recipe
ateamcliptar.control.type                                      =   executable_args
ateamcliptar.control.max_per_node                              =   {{ num_proc_per_node }}
ateamcliptar.control.executable                                =   {{ scripts }}/Ateamclipper.py
ateamcliptar.control.error_tolerance                           =   {{ error_tolerance }}
ateamcliptar.control.mapfile_in                                =   ndppp_prep_target.output.mapfile
ateamcliptar.control.arguments                                 =   [allms]
ateamcliptar.control.inputkey                                  =   allms

# make mapfile with the filenames of the results that we want
make_results_mapfile_uncor.control.kind                        =   plugin
make_results_mapfile_uncor.control.type                        =   makeResultsMapfile
make_results_mapfile_uncor.control.mapfile_dir                 =   input.output.mapfile_dir
make_results_mapfile_uncor.control.filename                    =   make_results_mapfile2.mapfile
make_results_mapfile_uncor.control.mapfile_in                  =   check_unflagged_map.output.mapfile
make_results_mapfile_uncor.control.target_dir                  =   {{ results_directory }}
make_results_mapfile_uncor.control.make_target_dir             =   True
make_results_mapfile_uncor.control.new_suffix                  =   .uncorr.ms

# move the results to where we want them
move_results_uncor.control.kind                                =   recipe
move_results_uncor.control.type                                =   executable_args
move_results_uncor.control.executable                          =   /bin/mv
move_results_uncor.control.max_per_node                        =   {{ num_proc_per_node_limit }}
move_results_uncor.control.mapfiles_in                         =   [check_unflagged_map.output.mapfile,make_results_mapfile_uncor.output.mapfile]
move_results_uncor.control.inputkeys                           =   [source,destination]
move_results_uncor.control.arguments                           =   [source,destination]

########################################################
##                                                    ##
##                  END PIPELINE                      ##
##                                                    ##
########################################################
